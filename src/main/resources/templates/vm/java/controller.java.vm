package ${packageName}.${moduleName}.controller;

import java.util.List;

import com.fun.common.pagehelper.CommonPage;
import com.fun.common.result.R;
import com.fun.common.utils.poi.ExcelUtil;
import io.swagger.annotations.ApiOperation;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import com.fun.framework.annotation.Log;
import ${packageName}.${moduleName}.entity.${ClassName};
import ${packageName}.${moduleName}.service.I${ClassName}Service;
import com.fun.framework.web.controller.AdminBaseController;
#if($table.crud)
#elseif($table.tree)
import com.fun.common.utils.StringUtils;
import com.fun.framework.web.entity.Ztree;
#end
import io.swagger.annotations.Api;

import static com.fun.common.result.R.*;

/**
 * @author ${author}
 * @date ${datetime}
 */
@Api(tags = {"${functionName}"})
@Controller
@RequestMapping("/admin/${moduleName}/${businessName}" )
public class ${ClassName}Controller extends AdminBaseController {
    private String prefix = "${moduleName}/${businessName}" ;

    @Autowired
    private I${ClassName}Service ${className}Service;


    @RequiresPermissions("${permissionPrefix}:view" )
    @GetMapping()
    public String ${businessName}() {
        return view(prefix + "/${businessName}" );
    }

#if($table.tree)
    @ApiOperation("查询${functionName}树列表" )
    @RequiresPermissions("${permissionPrefix}:list" )
    @PostMapping("/list" )
    @ResponseBody
    public List<${ClassName}> list(${ClassName} ${className}) {
        return ${className}Service.select${ClassName}List(${className});
    }
#elseif($table.crud)
    @ApiOperation("查询${functionName}列表" )
    @RequiresPermissions("${permissionPrefix}:list" )
    @PostMapping("/list" )
    @ResponseBody
    public R list(${ClassName} ${className}) {
        startPage();
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return success(CommonPage.restPage(list));
    }
#end

    @ApiOperation("导出${functionName}列表" )
    @RequiresPermissions("${permissionPrefix}:export" )
    @PostMapping("/export" )
    @ResponseBody
    public R export(${ClassName} ${className}) {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}. class);
        return util.exportExcel(list, "${businessName}" );
    }

#if($table.crud)
    /**
     * 新增${functionName}
     */
    @GetMapping("/add" )
    public String add() {
        return view(prefix + "/add" );
    }
#elseif($table.tree)
    /**
     * 新增${functionName}
     */
    @GetMapping(value = {"/add/{${pkColumn.javaField}}" , "/add/"})
    public String add(@PathVariable(value = "${pkColumn.javaField}" , required = false)Long ${pkColumn.javaField}, ModelMap mmap) {
        if (StringUtils.isNotNull(${pkColumn.javaField})) {
            mmap.put("${className}" , ${className}Service.select${ClassName}ById(${pkColumn.javaField}));
        }
        return view(prefix + "/add" );
    }
#end

    @ApiOperation("新增保存${functionName}" )
    @RequiresPermissions("${permissionPrefix}:add" )
    @Log("新增${functionName}" )
    @PostMapping("/add" )
    @ResponseBody
    public R addSave(${ClassName} ${className}) {
        return success(${className}Service.insert${ClassName}(${className}));
    }

    /**
     * 修改${functionName}
     */
    @GetMapping("/edit/{${pkColumn.javaField}}" )
    public String edit(@PathVariable("${pkColumn.javaField}" ) ${pkColumn.javaType} ${pkColumn.javaField}, ModelMap mmap) {
        ${ClassName} ${className} =${className}Service.select${ClassName}ById(${pkColumn.javaField});
        mmap.put("${className}" , ${className});
        return view(prefix + "/edit" );
    }

    @ApiOperation("修改保存${functionName}" )
    @RequiresPermissions("${permissionPrefix}:edit" )
    @Log("修改${functionName}" )
    @PostMapping("/edit" )
    @ResponseBody
    public R editSave(${ClassName} ${className}) {
        return success(${className}Service.update${ClassName}(${className}));
    }

#if($table.crud)

    @ApiOperation("删除${functionName}" )
    @RequiresPermissions("${permissionPrefix}:remove" )
    @Log("删除${functionName}" )
    @PostMapping("/remove" )
    @ResponseBody
    public R remove(String ids) {
        return success(${className}Service.delete${ClassName}ByIds(ids));
    }
#elseif($table.tree)

    @ApiOperation("删除${functionName}树" )
    @RequiresPermissions("${permissionPrefix}:remove" )
    @Log("删除${functionName}树" )
    @GetMapping("/remove/{${pkColumn.javaField}}" )
    @ResponseBody
    public R remove(@PathVariable("${pkColumn.javaField}" ) ${pkColumn.javaType} ${pkColumn.javaField}) {
        return success(${className}Service.delete${ClassName}ById(${pkColumn.javaField}));
    }
#end
#if($table.tree)

    /**
     * 选择${functionName}树
     */
        #set($BusinessName=$businessName.substring(0,1).toUpperCase() + ${businessName.substring(1)})
    @GetMapping(value = {"/select${BusinessName}Tree/{${pkColumn.javaField}}" , "/select${BusinessName}Tree/"})
    public String select${BusinessName}Tree(@PathVariable(value = "${pkColumn.javaField}" , required = false)Long ${pkColumn.javaField}, ModelMap mmap) {
        if (StringUtils.isNotNull(${pkColumn.javaField})) {
            mmap.put("${className}" , ${className}Service.select${ClassName}ById(${pkColumn.javaField}));
        }
        return view(prefix + "/tree" );
    }

    @ApiOperation("加载${functionName}树列表")
    @GetMapping("/treeData" )
    @ResponseBody
    public List<Ztree> treeData() {
        return ${className}Service.select${ClassName}Tree();
    }
#end
}
